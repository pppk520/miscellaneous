class Solution:
    # @param A : tuple of integers
    # @param B : integer
    # @return an integer
    def search(self, A, B):
        idx = self.find_rotate_idx(A)

        found = self.bin_search(A, idx, len(A) - 1, B)
        if found == None:
            found = self.bin_search(A, 0, idx, B)

        if found == None:
            return -1

        return found

    def bin_search(self, arr, lo, hi, target):
        while lo <= hi:
            mid = (lo + hi) / 2
        
            if arr[mid] > target:
                hi = mid - 1
            elif arr[mid] < target:
                lo = mid + 1
            else:
                return mid

    def find_rotate_idx(self, arr):
        lo = 0
        hi = len(arr) - 1

        if arr[hi] > arr[lo]:
            return 0 # no rotation

        while lo <= hi:
            mid = (lo + hi) / 2

            if mid < len(arr) - 1 and arr[mid] > arr[mid + 1]:
                return mid
            elif arr[mid] < arr[hi]:
                hi = mid
            else:
                lo = mid
                

if __name__ == '__main__':
    assert(Solution().search([192, 194, 197, 198, 199, 200, 201, 203, 204, 2, 3, 4, 7, 9, 10, 11, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 39, 40, 42, 43, 46, 47, 50, 51, 52, 53, 55, 57, 59, 60, 64, 66, 68, 70, 71, 72, 75, 76, 78, 85, 86, 87, 91, 92, 94, 95, 96, 99, 102, 105, 106, 107, 109, 111, 113, 114, 115, 119, 120, 121, 123, 125, 129, 130, 131, 133, 134, 137, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 152, 156, 160, 161, 165, 167, 168, 170, 171, 176, 177, 178, 179, 180, 181, 182, 185, 186, 190], 70) == 52)
    assert(Solution().search([186, 192, 193, 202, 204, 2, 3, 6, 10, 11, 12, 17, 21, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 47, 49, 50, 51, 52, 55, 57, 58, 59, 60, 65, 67, 68, 71, 72, 74, 77, 78, 80, 82, 83, 88, 89, 90, 94, 100, 107, 108, 109, 111, 112, 114, 115, 116, 118, 119, 121, 123, 124, 126, 129, 133, 134, 135, 137, 138, 144, 147, 148, 150, 151, 154, 156, 159, 161, 163, 165, 166, 167, 168, 169, 174, 178, 180, 182, 183, 185], 143) == -1)
    assert(Solution().search([4,5,6,7,0,1,2], 1) == 5)
    assert(Solution().search([7,0,1,2,3,4,5,6], 7) == 0)
    assert(Solution().search([0,1,2,3,4,5], 5) == 5)
    assert(Solution().search([180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 23, 26, 27, 28, 29, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 48, 51, 52, 53, 54, 56, 62, 63, 64, 67, 69, 72, 73, 75, 77, 78, 79, 83, 85, 87, 90, 91, 92, 93, 96, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 113, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 129, 130, 135, 137, 138, 139, 143, 144, 145, 147, 149, 152, 155, 156, 160, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], 42) == 43)
    assert(Solution().search([9, 10, 11, 12, 14, 15, 17, 19, 24, 25, 30, 39, 40, 44, 46, 48, 51, 53, 54, 56, 59, 60, 69, 70, 73, 75, 80, 87, 88, 89, 92, 93, 97, 99, 104, 107, 109, 110, 111, 117, 123, 124, 125, 126, 127, 128, 135, 136, 137, 141, 148, 153, 154, 161, 166, 167, 169, 175, 177, 180, 181, 182, 185, 186, 189, 193, 198, 202, 1, 2, 6, 7], 198) == 66)

